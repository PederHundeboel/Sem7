version: "3.5"

services:
  namenode: #Hadoop Master (metadata/chunk)
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
      docker-network:
  datanode1: #Hadoop Slave1
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    restart: always
    ports:
      - 9864:9864
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      docker-network:
  spark-master: # Spark master node
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      docker-network:
  spark-worker-1: # Spark worker node
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      docker-network:
  zookeeper: # Zookeeper
    image: confluentinc/cp-zookeeper:6.2.0
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      docker-network:
  kafka:
    image: confluentinc/cp-kafka:6.2.0
    ports:
      - 9092:9092
      - 9992:19092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS: 'true'
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PARTITION_ASSIGNMENT_STRATEGY: org.apache.kafka.clients.consumer.RoundRobinAssignor
    volumes:
      - confluent_kafka:/var/lib/kafka/data
    networks:
      docker-network:
  kowl:
    image: quay.io/cloudhut/kowl:master
    ports:
      - 8088:8080
    environment:
      KAFKA_BROKERS: kafka:9092
    restart: always
    networks:
      docker-network:
  sentinel_downloader:
    build: ./SentinelDownloader
    depends_on:
      - "kafka"
    links:
      - "kafka"
    networks:
     docker-network: 
networks:
  docker-network:
    name: hadoop
volumes:
  hadoop_namenode:
    name: namenode_volume
  hadoop_datanode1:
    name: datanode1_volume
  confluent_kafka:
    name: kafka_volume
