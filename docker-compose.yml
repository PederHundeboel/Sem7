version: "3.5"

services:
  namenode: #Hadoop Master (metadata/chunk)
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
      docker-network:
      #  ipv4_address: 172.202.0.12

  datanode1: #Hadoop Slave1
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    restart: always
    ports:
      - 9864:9864
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      docker-network:
      #  ipv4_address: 172.202.0.13
  hbase:
    image: bde2020/hbase-master:1.0.0-hbase1.2.6
    container_name: hbase
    hostname: hbase
    volumes:
      - hbase_data:/hbase-data
      - hbase_zookeeper_data:/zookeeper-data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hbase-distributed.env
    networks:
      docker-network:
  spark-master: # Spark master node
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      docker-network:
      #  ipv4_address: 172.202.0.9
  spark-worker-1: # Spark worker node
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      docker-network:
       # ipv4_address: 172.202.0.10
  zookeeper: # Zookeeper
    image: confluentinc/cp-zookeeper:6.2.0
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      docker-network:
  kafka:
    hostname: kafka
    container_name: kafka
    image: confluentinc/cp-kafka:6.2.0
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 #zookeeper:2181
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      #KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka19092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PARTITION_ASSIGNMENT_STRATEGY: org.apache.kafka.clients.consumer.RoundRobinAssignor
    volumes:
      - confluent_kafka:/var/lib/kafka/data
    networks:
      docker-network:
  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.0.0
    container_name: kafka-connect
    ports:
      - "8083:8083"
    #volumes:
    #  - ./hdfs-sink.properties:/etc/hdfs-sink.properties
    environment:      #CONFIG_FILEPATH: ./config.yaml
      CONNECT_BOOTSTRAP_SERVERS: "kafka:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-group-01-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-group-01-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-group-01-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8082'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/connectors,/usr/share/confluent-hub-components/'
    depends_on:
      - kafka
      - schema-registry
    volumes:
      - $PWD/data/connectors/:/connectors
    networks:
      docker-network:
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-hdfs3:1.1.5
        confluent-hub install --no-prompt confluentinc/kafka-connect-hbase:1.0.10
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
  schema-registry:
    image: "confluentinc/cp-schema-registry:6.0.0"
    #hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper #zookeeper
      - kafka
    ports:
      - '8082:8082'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:19092
      SCHEMA_REGISTRY_LISTENERS: "http://schema-registry:8082"
    networks:
      docker-network:
  kowl:
    image: quay.io/cloudhut/kowl:master
    ports:
      - 8088:8080
    #environment:
    #  KAFKA_BROKERS: kafka:9092
    restart: always
    volumes:
    - ./config.yaml:/etc/kowl/config.yaml
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    networks:
      docker-network:
#  custom-source: # flume custom source
#    image: probablyfine/flume
#    ports:
#     - "44444:44444"
#    volumes:
#     - ./flume-configs/custom-source.conf:/opt/flume-config/flume.conf
#    environment:
#    - FLUME_AGENT_NAME=docker-kafka
#  hdfs-sink: # flume sink to hdfs
#    image: probablyfine/flume
#    volumes:
#     - ./flume-configs/hdfs-sink.conf:/opt/flume-config/flume.conf
#    environment:
#    - FLUME_AGENT_NAME=docker-hdfs
#  kafka-sink: # flume sink to kafka
#    image: probablyfine/flume
#    volumes:
#     - ./flume-configs/kafka-sink.conf:/opt/flume-config/flume.conf
#    environment:
#    - FLUME_AGENT_NAME=docker-kafka
networks:
  docker-network:
    name: hadoop
    #ipam: # might be unnecessary
    #  config:
    #    - subnet: 172.202.0.0/24
volumes:
  hadoop_namenode:
    name: namenode_volume
  hadoop_datanode1:
    name: datanode1_volume
  confluent_kafka:
    name: kafka_volume
  hbase_data:
    name: hbase_data
  hbase_zookeeper_data:
    name: hbase_zookeeper_data